{"version":3,"sources":["assets/moonside.png","assets/Discord-Logo+Wordmark-White.svg","components/BannerServer.tsx","pages/Homepage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BannerServer","width","src","alt","className","href","target","rel","Component","Homepage","App","basename","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","Image","logo","roundedCircle","height","Nav","discordLogo","Container","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yD,0PCGtBC,E,uKAEb,OACI,iCACI,yBAAKC,MAAM,OAAOC,IAAI,kCAAkCC,IAAI,6CAC5D,yBAAKC,UAAU,WACX,wCACA,4DACA,uBAAGC,KAAK,6BAA6BC,OAAO,SAASC,IAAI,sBAAsBH,UAAU,uBAAzF,iB,GARsBI,aCArBC,E,uKAEb,OACI,6BACI,kBAAC,EAAD,W,GAJsBD,a,iBCOjBE,E,uKAEjB,OACE,kBAAC,IAAD,CAAQC,SAAS,cACf,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAUC,QAAQ,QACxD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KACzB,kBAACC,EAAA,EAAD,CAAOnB,IAAKoB,IAAMC,eAAa,EAACC,OAAO,OAAOvB,MAAM,UAEtD,kBAACwB,EAAA,EAAD,CAAKrB,UAAU,WACb,kBAACqB,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,KAAvB,WACA,kBAACK,EAAA,EAAIN,KAAL,CAAUd,KAAK,aAAf,YACA,kBAACoB,EAAA,EAAIN,KAAL,CAAUd,KAAK,YAAf,YAEF,kBAACoB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIN,KAAL,CAAUd,KAAK,4BAA4BC,OAAO,UAChD,kBAACe,EAAA,EAAD,CAAOnB,IAAKwB,IAAaF,OAAO,OAAOvB,MAAM,YAInD,kBAAC0B,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,c,GAtBmBrB,aCEbsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a16acd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moonside.cbb87a29.png\";","module.exports = __webpack_public_path__ + \"static/media/Discord-Logo+Wordmark-White.192cb945.svg\";","import React, { Component } from 'react'\r\nimport CSS from \"csstype\";\r\n\r\nexport default class BannerServer extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n                <img width=\"100%\" src=\"http://aristonia.fr//img/wp.gif\" alt=\"Aristonia - Serveur GTA5 RP - Chargement\" />\r\n                <div className=\"content\">\r\n                    <h1>Moonside</h1>\r\n                    <p>Serveur GTA5 RP - Francophone</p>\r\n                    <a href=\"https://discord.gg/AFqbEXE\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"button wide scrolly\">Discord</a>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport BannerServer from '../components/BannerServer'\r\n\r\nexport default class Homepage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BannerServer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"bootswatch/dist/flatly/bootstrap.min.css\";\nimport './App.css';\nimport { Container, Navbar, Nav, Image } from 'react-bootstrap';\nimport logo from './assets/moonside.png'\nimport Homepage from './pages/Homepage';\nimport discordLogo from './assets/Discord-Logo+Wordmark-White.svg';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router basename=\"/moonside/\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand as={Link} to=\"/\">\n            <Image src={logo} roundedCircle height=\"30px\" width=\"30px\" />\n          </Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Accueil</Nav.Link>\n            <Nav.Link href=\"#features\">Features</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"https://discord.gg/hJXTne\" target=\"_blank\">\n              <Image src={discordLogo} height=\"30px\" width=\"auto\" />\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n        <Container>\n          <Switch>\n            <Route exact path=\"/\">\n              <Homepage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}