{"version":3,"sources":["assets/moonside.png","assets/Discord-Logo+Wordmark-White.svg","components/BannerServer.tsx","pages/Homepage.tsx","pages/ReviewsPage.tsx","components/Stream.tsx","pages/StreamsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BannerServer","Button","as","Link","to","target","rel","size","variant","Component","Homepage","className","YouTube","videoId","opts","height","width","playerVars","autoplay","accelerometer","allowfullscreen","Container","Row","ReviewsPage","Stream","channel","this","props","layout","muted","targetId","StreamsPage","streamChannels","map","index","Col","xs","App","basename","Navbar","collapseOnSelect","expand","bg","Brand","Image","src","logo","roundedCircle","Nav","href","discordLogo","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f99ac6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moonside.cbb87a29.png\";","module.exports = __webpack_public_path__ + \"static/media/Discord-Logo+Wordmark-White.192cb945.svg\";","import React, { Component } from 'react'\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaDiscord } from 'react-icons/fa';\r\n\r\nexport default class BannerServer extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div>\r\n                    <h1>Moonside</h1>\r\n                    <h2>Serveur GTA5 RP - Francophone</h2>\r\n                    <Button as={Link} to=\"https://discord.gg/AFqbEXE\" target=\"_blank\" rel=\"noopener noreferrer\" size=\"lg\" variant=\"info\"><FaDiscord /> Discord</Button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport BannerServer from '../components/BannerServer'\r\nimport { Container, Row } from 'react-bootstrap'\r\nimport { FaEnvelope, FaGem, FaCommentDots, FaHeart } from 'react-icons/fa';\r\nimport YouTube from 'react-youtube';\r\n\r\nexport default class Homepage extends Component {\r\n    render() {\r\n        const opts: any = {\r\n            height: '480',\r\n            width: '854',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n                autoplay: 0,\r\n                accelerometer: 1,\r\n                allowfullscreen: 1,\r\n            }\r\n        };\r\n        return (\r\n            <div>\r\n                <BannerServer />\r\n                <div>\r\n                    <h2>Le RolePlay à son apogée</h2>\r\n                    <p>\r\n                        Avec un staff très présent, vous pourrez rejoindre la ville de Moonside et jouer le rôle que vous souhaitez.\r\n                        Bebert le fermier ? Clyde le lieutenant de LSPD ? Travis le bras droit des Bloods ?\r\n                        Rejoins cette ville en constante évolution et saisis toute opportunité pour développer ton univers !\r\n                    </p>\r\n                    <div className=\"iframe-container mx-auto\">\r\n                        <YouTube\r\n                            videoId=\"jafqrChRUi4\"\r\n                            opts={opts}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Container>\r\n                            <Row>\r\n                                <ul className=\"features col-sm-12\">\r\n                                    <li className=\"col-sm-3\">\r\n                                        <span className=\"wrapper-major\">\r\n                                            <FaEnvelope className=\"icon-major\" />\r\n                                        </span>\r\n                                        <h3>Accès libre</h3>\r\n                                    </li>\r\n                                    <li className=\"col-sm-3\">\r\n                                        <span className=\"wrapper-major\">\r\n                                            <FaGem className=\"icon-major\" />\r\n                                        </span>\r\n                                        <h3>Légal &amp; Illégal</h3>\r\n                                    </li>\r\n                                    <li className=\"col-sm-3\">\r\n                                        <span className=\"wrapper-major\">\r\n                                            <FaCommentDots className=\"icon-major\" />\r\n                                        </span>\r\n                                        <h3>Evénements &amp; Soirées</h3>\r\n                                    </li>\r\n                                    <li className=\"col-sm-3\">\r\n                                        <span className=\"wrapper-major\">\r\n                                            <FaHeart className=\"icon-major\" />\r\n                                        </span>\r\n                                        <h3>Staff actif</h3>\r\n                                    </li>\r\n                                </ul>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h3>Règlement</h3>\r\n                    <p>\r\n                        Le règlement se trouve sur le discord du serveur dans le cannal Règlement. Le staff se veut juste et proche de celui-ci.\r\n                        Aucun écart ne sera toléré, et aucun script ou cheat ne sera accepté.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ReviewsPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TwitchEmbedVideo from \"react-twitch-embed-video\"\r\n\r\nexport default class Stream extends Component <any, any> {\r\n    render() {\r\n        return (\r\n            <TwitchEmbedVideo\r\n                autoplay\r\n                channel={this.props.channel}\r\n                height=\"100%\"\r\n                layout=\"video\"\r\n                muted={true}\r\n                targetId={\"twitch-embed-\" + this.props.channel}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Stream from '../components/Stream'\r\nimport { Col, Row } from 'react-bootstrap'\r\n\r\nexport default class StreamsPage extends Component {\r\n    streamChannels: string[] = [\r\n        'artandor',\r\n        'jlaudok',\r\n        'JLFranklin_',\r\n    ]\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {this.streamChannels.map((channel, index) => {\r\n                    return (\r\n                        <Col xs=\"6\" className=\"my-2\">\r\n                            <div className=\"iframe-container\">\r\n                                <Stream channel={channel} />\r\n                            </div>\r\n\r\n                        </Col>\r\n                    )\r\n                })}\r\n            </Row>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"bootswatch/dist/flatly/bootstrap.min.css\";\nimport './App.css';\nimport { Container, Navbar, Nav, Image } from 'react-bootstrap';\nimport logo from './assets/moonside.png'\nimport Homepage from './pages/Homepage';\nimport discordLogo from './assets/Discord-Logo+Wordmark-White.svg';\nimport ReviewsPage from './pages/ReviewsPage';\nimport StreamsPage from './pages/StreamsPage';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router basename=\"/moonside/\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand as={Link} to=\"/\">\n            <Image src={logo} roundedCircle height=\"30px\" width=\"30px\" />\n          </Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Accueil</Nav.Link>\n            <Nav.Link as={Link} to=\"/reviews\">Avis</Nav.Link>\n            <Nav.Link as={Link} to=\"/streams\">Streams</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"https://discord.gg/hJXTne\" target=\"_blank\">\n              <Image src={discordLogo} height=\"30px\" width=\"auto\" />\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n        <Container>\n          <Switch>\n            <Route exact path=\"/\">\n              <Homepage />\n            </Route>\n            <Route exact path=\"/reviews\">\n              <ReviewsPage />\n            </Route>\n            <Route exact path=\"/streams\">\n              <StreamsPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}